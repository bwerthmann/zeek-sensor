data_dir: /var/lib/vector
sources:
  zeek_logs:
    type: file
    include:
      - /usr/local/zeek/logs/*.log
transforms:
  remap_zeek:
    inputs: [zeek_logs]
    type: remap
    reroute_dropped: true
    source: |
      zeekfileparts = split!(.file, "/")
      zeekfilename = zeekfileparts[5]
      zeekfile = split!(zeekfilename,".log")[0]
      if zeekfile == "conn" {
        zeekfile = "connection"
      }
      zeekjson, err = parse_json(.message)
      if err != null {
        log("Unable to parse JSON: " + err, level: "error")
      }
      obj, err = set(., ["zeek", zeekfile], zeekjson)
      if err != null {
        log("Unable to set zeek path: " + err, level: "error")
      }
      . = obj
      del(.message)
      node_name, err = get_env_var("K8S_NODE_NAME")
      if err != null {
        log("Unable to set K8S_NODE_NAME: " + err, level: "error")
      }
      .k8s.node.name = node_name
      pod_name, err = get_env_var("K8S_POD_NAME")
      if err != null {
        log("Unable to set K8S_POD_NAME: " + err, level: "error")
      }
      .k8s.pod.name = pod_name
      pod_namespace, err = get_env_var("K8S_POD_NAMESPACE")
      if err != null {
        log("Unable to set K8S_POD_NAMESPACE: " + err, level: "error")
      }
      .k8s.pod.namespace = pod_namespace
      pod_ip, err = get_env_var("K8S_POD_IP")
      if err != null {
        log("Unable to set K8S_POD_IP: " + err, level: "error")
      }
      .k8s.pod.ip = pod_ip
sinks:
  aggregator:
    type: vector
    inputs:
      - remap_zeek
    address: vector.default.svc.cluster.local.:6000
  aggregatordrop:
    type: vector
    inputs:
      - remap_zeek.dropped
    address: vector.default.svc.cluster.local.:6000
